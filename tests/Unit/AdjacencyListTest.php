<?php

declare(strict_types=1);

namespace Test\Unit;

use PHPUnit\Framework\TestCase;
use Tree\AdjacencyList;

/**
 * @internal
 */
final class AdjacencyListTest extends TestCase
{
    public AdjacencyList $adjacencyList;

    public array $input = [
        ['id' => 1, 'parent_id' => 0, 'title' => 'Корневой узел'],
        ['id' => 2, 'parent_id' => 1, 'title' => 'Языки программирования'],
        ['id' => 5, 'parent_id' => 2, 'title' => 'php'],
        ['id' => 6, 'parent_id' => 2, 'title' => 'js'],
        ['id' => 7, 'parent_id' => 6, 'title' => 'Функции'],
        ['id' => 8, 'parent_id' => 7, 'title' => 'DOM'],
        ['id' => 9, 'parent_id' => 8, 'title' => 'Автоматический скролл'],
        ['id' => 10, 'parent_id' => 8, 'title' => 'Подстраивание контента'],
        ['id' => 3, 'parent_id' => 1, 'title' => 'Книги по программированию'],
        ['id' => 4, 'parent_id' => 1, 'title' => 'Курсы по программированию'],
    ];

    protected function setUp(): void
    {
        $this->adjacencyList = new AdjacencyList($this->input, ['parent' => 'parent_id']);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateRootNodes(): void
    {
        $this->adjacencyList->makeRootNodes();
        self::assertCount(1, $this->adjacencyList->output);
    }

    public function testCreate(): void
    {
        $getTree = $this->adjacencyList->getTree();

        /**
         * @psalm-suppress MixedArrayAccess
         * @psalm-suppress PossiblyInvalidArrayOffset
         */
        self::assertEquals(
            'Автоматический скролл',
            $getTree[0]['children'][2]['children'][0]['children'][0]['children'][0]['children'][1]['title']
        );
    }
}
